// Code generated by protoc-gen-go. DO NOT EDIT.
// source: market.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	market.proto

It has these top-level messages:
	CreateAccountRequest
	CreateAccountResponse
	AssetRule
	CreateAssetRequest
	CreateAssetResponse
	CreateHoldingRequest
	CreateHoldingResponse
	MarketplaceHolding
	OfferParticipant
	CreateOfferRequest
	CreateOfferResponse
	AcceptOfferRequest
	AcceptOfferResponse
	CloseOfferRequest
	CloseOfferResponse
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type CreateAccountRequest struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Email string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
}

func (m *CreateAccountRequest) Reset()                    { *m = CreateAccountRequest{} }
func (m *CreateAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateAccountRequest) ProtoMessage()               {}
func (*CreateAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateAccountRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateAccountRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

// The response message containing the greetings
type CreateAccountResponse struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *CreateAccountResponse) Reset()                    { *m = CreateAccountResponse{} }
func (m *CreateAccountResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateAccountResponse) ProtoMessage()               {}
func (*CreateAccountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateAccountResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type AssetRule struct {
	Type  int32  `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *AssetRule) Reset()                    { *m = AssetRule{} }
func (m *AssetRule) String() string            { return proto.CompactTextString(m) }
func (*AssetRule) ProtoMessage()               {}
func (*AssetRule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AssetRule) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *AssetRule) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// The request message containing the user's name.
type CreateAssetRequest struct {
	Name        string       `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Description string       `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Rules       []*AssetRule `protobuf:"bytes,3,rep,name=rules" json:"rules,omitempty"`
	Token       string       `protobuf:"bytes,4,opt,name=token" json:"token,omitempty"`
}

func (m *CreateAssetRequest) Reset()                    { *m = CreateAssetRequest{} }
func (m *CreateAssetRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateAssetRequest) ProtoMessage()               {}
func (*CreateAssetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CreateAssetRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateAssetRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateAssetRequest) GetRules() []*AssetRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *CreateAssetRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// The response message containing the greetings
type CreateAssetResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *CreateAssetResponse) Reset()                    { *m = CreateAssetResponse{} }
func (m *CreateAssetResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateAssetResponse) ProtoMessage()               {}
func (*CreateAssetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CreateAssetResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// The request message containing the user's name.
type CreateHoldingRequest struct {
	Identifier string `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	Label      string `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	Descrption string `protobuf:"bytes,3,opt,name=descrption" json:"descrption,omitempty"`
	Account    string `protobuf:"bytes,4,opt,name=account" json:"account,omitempty"`
	Asset      string `protobuf:"bytes,5,opt,name=asset" json:"asset,omitempty"`
	Quantity   int64  `protobuf:"varint,6,opt,name=quantity" json:"quantity,omitempty"`
	Token      string `protobuf:"bytes,7,opt,name=token" json:"token,omitempty"`
}

func (m *CreateHoldingRequest) Reset()                    { *m = CreateHoldingRequest{} }
func (m *CreateHoldingRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateHoldingRequest) ProtoMessage()               {}
func (*CreateHoldingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CreateHoldingRequest) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *CreateHoldingRequest) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *CreateHoldingRequest) GetDescrption() string {
	if m != nil {
		return m.Descrption
	}
	return ""
}

func (m *CreateHoldingRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *CreateHoldingRequest) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *CreateHoldingRequest) GetQuantity() int64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *CreateHoldingRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// The response message containing the greetings
type CreateHoldingResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *CreateHoldingResponse) Reset()                    { *m = CreateHoldingResponse{} }
func (m *CreateHoldingResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateHoldingResponse) ProtoMessage()               {}
func (*CreateHoldingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CreateHoldingResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type MarketplaceHolding struct {
	HoldingId string `protobuf:"bytes,1,opt,name=holdingId" json:"holdingId,omitempty"`
	Quantity  int64  `protobuf:"varint,2,opt,name=quantity" json:"quantity,omitempty"`
	Asset     string `protobuf:"bytes,3,opt,name=asset" json:"asset,omitempty"`
}

func (m *MarketplaceHolding) Reset()                    { *m = MarketplaceHolding{} }
func (m *MarketplaceHolding) String() string            { return proto.CompactTextString(m) }
func (*MarketplaceHolding) ProtoMessage()               {}
func (*MarketplaceHolding) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *MarketplaceHolding) GetHoldingId() string {
	if m != nil {
		return m.HoldingId
	}
	return ""
}

func (m *MarketplaceHolding) GetQuantity() int64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *MarketplaceHolding) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

type OfferParticipant struct {
	SrcHolding    string `protobuf:"bytes,1,opt,name=SrcHolding" json:"SrcHolding,omitempty"`
	TargetHolding string `protobuf:"bytes,2,opt,name=TargetHolding" json:"TargetHolding,omitempty"`
	SrcAsset      string `protobuf:"bytes,3,opt,name=SrcAsset" json:"SrcAsset,omitempty"`
	TargetAsset   string `protobuf:"bytes,4,opt,name=TargetAsset" json:"TargetAsset,omitempty"`
}

func (m *OfferParticipant) Reset()                    { *m = OfferParticipant{} }
func (m *OfferParticipant) String() string            { return proto.CompactTextString(m) }
func (*OfferParticipant) ProtoMessage()               {}
func (*OfferParticipant) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *OfferParticipant) GetSrcHolding() string {
	if m != nil {
		return m.SrcHolding
	}
	return ""
}

func (m *OfferParticipant) GetTargetHolding() string {
	if m != nil {
		return m.TargetHolding
	}
	return ""
}

func (m *OfferParticipant) GetSrcAsset() string {
	if m != nil {
		return m.SrcAsset
	}
	return ""
}

func (m *OfferParticipant) GetTargetAsset() string {
	if m != nil {
		return m.TargetAsset
	}
	return ""
}

type CreateOfferRequest struct {
	Identifier  string              `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	Label       string              `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	Description string              `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Source      *MarketplaceHolding `protobuf:"bytes,4,opt,name=source" json:"source,omitempty"`
	Target      *MarketplaceHolding `protobuf:"bytes,5,opt,name=target" json:"target,omitempty"`
	Rules       []*AssetRule        `protobuf:"bytes,6,rep,name=rules" json:"rules,omitempty"`
	Token       string              `protobuf:"bytes,7,opt,name=token" json:"token,omitempty"`
}

func (m *CreateOfferRequest) Reset()                    { *m = CreateOfferRequest{} }
func (m *CreateOfferRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateOfferRequest) ProtoMessage()               {}
func (*CreateOfferRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CreateOfferRequest) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *CreateOfferRequest) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *CreateOfferRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateOfferRequest) GetSource() *MarketplaceHolding {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *CreateOfferRequest) GetTarget() *MarketplaceHolding {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *CreateOfferRequest) GetRules() []*AssetRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *CreateOfferRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type CreateOfferResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *CreateOfferResponse) Reset()                    { *m = CreateOfferResponse{} }
func (m *CreateOfferResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateOfferResponse) ProtoMessage()               {}
func (*CreateOfferResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CreateOfferResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type AcceptOfferRequest struct {
	Identifier string            `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	Sender     *OfferParticipant `protobuf:"bytes,2,opt,name=sender" json:"sender,omitempty"`
	Receiver   *OfferParticipant `protobuf:"bytes,3,opt,name=receiver" json:"receiver,omitempty"`
	Count      int64             `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
	Token      string            `protobuf:"bytes,5,opt,name=token" json:"token,omitempty"`
}

func (m *AcceptOfferRequest) Reset()                    { *m = AcceptOfferRequest{} }
func (m *AcceptOfferRequest) String() string            { return proto.CompactTextString(m) }
func (*AcceptOfferRequest) ProtoMessage()               {}
func (*AcceptOfferRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *AcceptOfferRequest) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *AcceptOfferRequest) GetSender() *OfferParticipant {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *AcceptOfferRequest) GetReceiver() *OfferParticipant {
	if m != nil {
		return m.Receiver
	}
	return nil
}

func (m *AcceptOfferRequest) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *AcceptOfferRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type AcceptOfferResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *AcceptOfferResponse) Reset()                    { *m = AcceptOfferResponse{} }
func (m *AcceptOfferResponse) String() string            { return proto.CompactTextString(m) }
func (*AcceptOfferResponse) ProtoMessage()               {}
func (*AcceptOfferResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *AcceptOfferResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CloseOfferRequest struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Token string `protobuf:"bytes,4,opt,name=token" json:"token,omitempty"`
}

func (m *CloseOfferRequest) Reset()                    { *m = CloseOfferRequest{} }
func (m *CloseOfferRequest) String() string            { return proto.CompactTextString(m) }
func (*CloseOfferRequest) ProtoMessage()               {}
func (*CloseOfferRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *CloseOfferRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CloseOfferRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type CloseOfferResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *CloseOfferResponse) Reset()                    { *m = CloseOfferResponse{} }
func (m *CloseOfferResponse) String() string            { return proto.CompactTextString(m) }
func (*CloseOfferResponse) ProtoMessage()               {}
func (*CloseOfferResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *CloseOfferResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateAccountRequest)(nil), "rpc.CreateAccountRequest")
	proto.RegisterType((*CreateAccountResponse)(nil), "rpc.CreateAccountResponse")
	proto.RegisterType((*AssetRule)(nil), "rpc.AssetRule")
	proto.RegisterType((*CreateAssetRequest)(nil), "rpc.CreateAssetRequest")
	proto.RegisterType((*CreateAssetResponse)(nil), "rpc.CreateAssetResponse")
	proto.RegisterType((*CreateHoldingRequest)(nil), "rpc.CreateHoldingRequest")
	proto.RegisterType((*CreateHoldingResponse)(nil), "rpc.CreateHoldingResponse")
	proto.RegisterType((*MarketplaceHolding)(nil), "rpc.MarketplaceHolding")
	proto.RegisterType((*OfferParticipant)(nil), "rpc.OfferParticipant")
	proto.RegisterType((*CreateOfferRequest)(nil), "rpc.CreateOfferRequest")
	proto.RegisterType((*CreateOfferResponse)(nil), "rpc.CreateOfferResponse")
	proto.RegisterType((*AcceptOfferRequest)(nil), "rpc.AcceptOfferRequest")
	proto.RegisterType((*AcceptOfferResponse)(nil), "rpc.AcceptOfferResponse")
	proto.RegisterType((*CloseOfferRequest)(nil), "rpc.CloseOfferRequest")
	proto.RegisterType((*CloseOfferResponse)(nil), "rpc.CloseOfferResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Market service

type MarketClient interface {
	// create account
	DoCreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	// create asset
	DoCreateAsset(ctx context.Context, in *CreateAssetRequest, opts ...grpc.CallOption) (*CreateAssetResponse, error)
	// create holding
	DoCreateHolding(ctx context.Context, in *CreateHoldingRequest, opts ...grpc.CallOption) (*CreateHoldingResponse, error)
	DoCreateOffer(ctx context.Context, in *CreateOfferRequest, opts ...grpc.CallOption) (*CreateOfferResponse, error)
	DoAcceptOffer(ctx context.Context, in *AcceptOfferRequest, opts ...grpc.CallOption) (*AcceptOfferResponse, error)
	DoCloseOffer(ctx context.Context, in *CloseOfferRequest, opts ...grpc.CallOption) (*CloseOfferResponse, error)
}

type marketClient struct {
	cc *grpc.ClientConn
}

func NewMarketClient(cc *grpc.ClientConn) MarketClient {
	return &marketClient{cc}
}

func (c *marketClient) DoCreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := grpc.Invoke(ctx, "/rpc.market/doCreateAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DoCreateAsset(ctx context.Context, in *CreateAssetRequest, opts ...grpc.CallOption) (*CreateAssetResponse, error) {
	out := new(CreateAssetResponse)
	err := grpc.Invoke(ctx, "/rpc.market/doCreateAsset", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DoCreateHolding(ctx context.Context, in *CreateHoldingRequest, opts ...grpc.CallOption) (*CreateHoldingResponse, error) {
	out := new(CreateHoldingResponse)
	err := grpc.Invoke(ctx, "/rpc.market/doCreateHolding", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DoCreateOffer(ctx context.Context, in *CreateOfferRequest, opts ...grpc.CallOption) (*CreateOfferResponse, error) {
	out := new(CreateOfferResponse)
	err := grpc.Invoke(ctx, "/rpc.market/doCreateOffer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DoAcceptOffer(ctx context.Context, in *AcceptOfferRequest, opts ...grpc.CallOption) (*AcceptOfferResponse, error) {
	out := new(AcceptOfferResponse)
	err := grpc.Invoke(ctx, "/rpc.market/doAcceptOffer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DoCloseOffer(ctx context.Context, in *CloseOfferRequest, opts ...grpc.CallOption) (*CloseOfferResponse, error) {
	out := new(CloseOfferResponse)
	err := grpc.Invoke(ctx, "/rpc.market/doCloseOffer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Market service

type MarketServer interface {
	// create account
	DoCreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	// create asset
	DoCreateAsset(context.Context, *CreateAssetRequest) (*CreateAssetResponse, error)
	// create holding
	DoCreateHolding(context.Context, *CreateHoldingRequest) (*CreateHoldingResponse, error)
	DoCreateOffer(context.Context, *CreateOfferRequest) (*CreateOfferResponse, error)
	DoAcceptOffer(context.Context, *AcceptOfferRequest) (*AcceptOfferResponse, error)
	DoCloseOffer(context.Context, *CloseOfferRequest) (*CloseOfferResponse, error)
}

func RegisterMarketServer(s *grpc.Server, srv MarketServer) {
	s.RegisterService(&_Market_serviceDesc, srv)
}

func _Market_DoCreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DoCreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.market/DoCreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DoCreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DoCreateAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DoCreateAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.market/DoCreateAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DoCreateAsset(ctx, req.(*CreateAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DoCreateHolding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHoldingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DoCreateHolding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.market/DoCreateHolding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DoCreateHolding(ctx, req.(*CreateHoldingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DoCreateOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DoCreateOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.market/DoCreateOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DoCreateOffer(ctx, req.(*CreateOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DoAcceptOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DoAcceptOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.market/DoAcceptOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DoAcceptOffer(ctx, req.(*AcceptOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DoCloseOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DoCloseOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.market/DoCloseOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DoCloseOffer(ctx, req.(*CloseOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Market_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.market",
	HandlerType: (*MarketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "doCreateAccount",
			Handler:    _Market_DoCreateAccount_Handler,
		},
		{
			MethodName: "doCreateAsset",
			Handler:    _Market_DoCreateAsset_Handler,
		},
		{
			MethodName: "doCreateHolding",
			Handler:    _Market_DoCreateHolding_Handler,
		},
		{
			MethodName: "doCreateOffer",
			Handler:    _Market_DoCreateOffer_Handler,
		},
		{
			MethodName: "doAcceptOffer",
			Handler:    _Market_DoAcceptOffer_Handler,
		},
		{
			MethodName: "doCloseOffer",
			Handler:    _Market_DoCloseOffer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "market.proto",
}

func init() { proto.RegisterFile("market.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 685 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x5d, 0x6e, 0xd3, 0x4e,
	0x10, 0xaf, 0xe3, 0x26, 0x6d, 0x27, 0x6d, 0xff, 0x7f, 0x96, 0x96, 0x9a, 0x08, 0xa1, 0xc8, 0xea,
	0x43, 0x5f, 0x9a, 0xaa, 0x41, 0x3c, 0xf0, 0x46, 0x54, 0x1e, 0x00, 0x09, 0x81, 0x5c, 0x2e, 0xb0,
	0x5d, 0x4f, 0xcb, 0xaa, 0x8e, 0xed, 0xae, 0xd7, 0x95, 0x7a, 0x01, 0x1e, 0x38, 0x00, 0x37, 0xe1,
	0x02, 0x1c, 0x80, 0x33, 0x21, 0xef, 0x87, 0xbd, 0x8e, 0xd3, 0x06, 0xc4, 0xdb, 0xce, 0xec, 0x7c,
	0xfc, 0xe6, 0x37, 0x33, 0xbb, 0xb0, 0x3d, 0xa7, 0xe2, 0x1a, 0xe5, 0x24, 0x17, 0x99, 0xcc, 0x88,
	0x2f, 0x72, 0x16, 0xbe, 0x86, 0xbd, 0x33, 0x81, 0x54, 0xe2, 0x8c, 0xb1, 0xac, 0x4c, 0x65, 0x84,
	0x37, 0x25, 0x16, 0x92, 0x10, 0x58, 0x4f, 0xe9, 0x1c, 0x03, 0x6f, 0xec, 0x1d, 0x6d, 0x45, 0xea,
	0x4c, 0xf6, 0xa0, 0x8f, 0x73, 0xca, 0x93, 0xa0, 0xa7, 0x94, 0x5a, 0x08, 0x8f, 0x61, 0x7f, 0x21,
	0x42, 0x91, 0x67, 0x69, 0xa1, 0xcc, 0x65, 0x76, 0x8d, 0xa9, 0x89, 0xa1, 0x85, 0xf0, 0x25, 0x6c,
	0xcd, 0x8a, 0x02, 0x65, 0x54, 0x26, 0x58, 0x65, 0x91, 0x77, 0xb9, 0xce, 0xd2, 0x8f, 0xd4, 0xb9,
	0x72, 0xbb, 0xa5, 0x49, 0x89, 0x36, 0x8b, 0x12, 0xc2, 0xaf, 0x1e, 0x10, 0x93, 0x46, 0x79, 0x3f,
	0x00, 0x73, 0x0c, 0xc3, 0x18, 0x0b, 0x26, 0x78, 0x2e, 0x79, 0x96, 0x9a, 0x30, 0xae, 0x8a, 0x1c,
	0x42, 0x5f, 0x94, 0x09, 0x16, 0x81, 0x3f, 0xf6, 0x8f, 0x86, 0xd3, 0xdd, 0x89, 0xc8, 0xd9, 0xa4,
	0x46, 0x15, 0xe9, 0xcb, 0x06, 0xff, 0xba, 0x8b, 0xff, 0x04, 0x1e, 0xb7, 0x70, 0x98, 0x62, 0x03,
	0xd8, 0x98, 0x63, 0x51, 0xd0, 0x2b, 0x8b, 0xc5, 0x8a, 0xe1, 0x2f, 0xcf, 0x52, 0xfc, 0x36, 0x4b,
	0x62, 0x9e, 0x5e, 0x59, 0xec, 0xcf, 0x01, 0x78, 0x8c, 0xa9, 0xe4, 0x97, 0x1c, 0x85, 0xf1, 0x72,
	0x34, 0x55, 0xfe, 0x84, 0x5e, 0x60, 0x4d, 0xb7, 0x12, 0x2a, 0x2f, 0x55, 0x8a, 0x2e, 0xce, 0xd7,
	0x5e, 0x8d, 0xa6, 0x02, 0x42, 0x75, 0x23, 0x0c, 0x6e, 0x2b, 0x56, 0xf1, 0x68, 0x85, 0x39, 0xe8,
	0xeb, 0x78, 0x4a, 0x20, 0x23, 0xd8, 0xbc, 0x29, 0x69, 0x2a, 0xb9, 0xbc, 0x0b, 0x06, 0x63, 0xef,
	0xc8, 0x8f, 0x6a, 0xb9, 0x61, 0x60, 0xc3, 0x65, 0xe0, 0xd4, 0x36, 0xbc, 0xae, 0x67, 0x25, 0x07,
	0x31, 0x90, 0x0f, 0x6a, 0xf4, 0xf2, 0x84, 0x32, 0xeb, 0x47, 0x9e, 0xc1, 0xd6, 0x17, 0x7d, 0x7c,
	0x17, 0x1b, 0x8f, 0x46, 0xd1, 0x02, 0xd6, 0xeb, 0x02, 0xd3, 0xa5, 0xf8, 0x4e, 0x29, 0xe1, 0x77,
	0x0f, 0xfe, 0xff, 0x78, 0x79, 0x89, 0xe2, 0x13, 0x15, 0x92, 0x33, 0x9e, 0xd3, 0x54, 0xb1, 0x7c,
	0x2e, 0x98, 0x49, 0x69, 0x59, 0x6e, 0x34, 0xe4, 0x10, 0x76, 0x3e, 0x53, 0x71, 0x85, 0xd2, 0x9a,
	0x68, 0xb6, 0xdb, 0xca, 0x0a, 0xcc, 0xb9, 0x60, 0x33, 0x27, 0x67, 0x2d, 0x57, 0xf3, 0xa6, 0x8d,
	0xf5, 0xb5, 0x66, 0xdd, 0x55, 0x85, 0xdf, 0x7a, 0x76, 0x78, 0x15, 0xbc, 0x7f, 0x1b, 0x80, 0x85,
	0xf1, 0xf6, 0xbb, 0xe3, 0x7d, 0x02, 0x83, 0x22, 0x2b, 0x05, 0x43, 0x85, 0x65, 0x38, 0x3d, 0x50,
	0xf3, 0xdd, 0x6d, 0x40, 0x64, 0xcc, 0x2a, 0x07, 0xa9, 0xe0, 0xaa, 0xd1, 0x78, 0xc8, 0x41, 0x9b,
	0x35, 0x0b, 0x34, 0xf8, 0xa3, 0x05, 0xda, 0x58, 0xba, 0x40, 0x86, 0x8b, 0x95, 0xc3, 0xf3, 0xd3,
	0x03, 0x32, 0x63, 0x0c, 0x73, 0xf9, 0x57, 0xec, 0x1d, 0xc3, 0xa0, 0xc0, 0x34, 0x46, 0xa1, 0xe8,
	0x1b, 0x4e, 0xf7, 0x15, 0xc8, 0xc5, 0xf9, 0x88, 0x8c, 0x11, 0x39, 0x85, 0x4d, 0x81, 0x0c, 0xf9,
	0x2d, 0x0a, 0xc5, 0xe9, 0xbd, 0x0e, 0xb5, 0x59, 0x55, 0x5f, 0xb3, 0x68, 0x7e, 0xd4, 0xaf, 0xd7,
	0x4c, 0x57, 0xdd, 0x5f, 0xa8, 0xba, 0x55, 0xc3, 0xca, 0xaa, 0x5f, 0xc1, 0xa3, 0xb3, 0x24, 0x2b,
	0xda, 0x13, 0xb3, 0x0b, 0x3d, 0x6e, 0x57, 0xa5, 0xc7, 0xe3, 0x7b, 0x9e, 0xa8, 0x09, 0x10, 0xd7,
	0x75, 0x55, 0xaa, 0xe9, 0x0f, 0x1f, 0x06, 0xfa, 0x67, 0x20, 0xef, 0xe1, 0xbf, 0x38, 0x6b, 0x3d,
	0xe7, 0xe4, 0xa9, 0xa2, 0x61, 0xd9, 0x27, 0x31, 0x1a, 0x2d, 0xbb, 0xd2, 0xe9, 0xc2, 0x35, 0xf2,
	0x06, 0x76, 0xea, 0x58, 0x6a, 0x51, 0x0e, 0x5c, 0x73, 0xe7, 0x15, 0x1f, 0x05, 0xdd, 0x8b, 0x3a,
	0x8a, 0x83, 0xc8, 0x2e, 0xa3, 0x8b, 0xa8, 0xfd, 0xa6, 0xb6, 0x10, 0x2d, 0x3c, 0x4f, 0x6d, 0x44,
	0x8a, 0x9b, 0x16, 0x22, 0x97, 0xe8, 0x16, 0xa2, 0x16, 0x8d, 0x36, 0x8a, 0xd3, 0x4c, 0x13, 0xa5,
	0x3b, 0xa2, 0x26, 0xca, 0x92, 0xbe, 0x87, 0x6b, 0x64, 0x06, 0xdb, 0x71, 0xd6, 0xb4, 0x89, 0x3c,
	0xd1, 0x19, 0x17, 0x5b, 0x3e, 0x3a, 0xe8, 0xe8, 0x6d, 0x88, 0x8b, 0x81, 0xfa, 0xc7, 0x5f, 0xfc,
	0x0e, 0x00, 0x00, 0xff, 0xff, 0x3d, 0x26, 0x15, 0xbf, 0xd7, 0x07, 0x00, 0x00,
}
