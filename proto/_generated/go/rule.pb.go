// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rule.proto

package market

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Rule_RuleType int32

const (
	Rule_RULE_UNSET                   Rule_RuleType = 0
	Rule_OWNER_HOLDINGS_INFINITE      Rule_RuleType = 100
	Rule_ALL_HOLDINGS_INFINITE        Rule_RuleType = 101
	Rule_NOT_TRANSFERABLE             Rule_RuleType = 102
	Rule_REQUIRE_SOURCE_TYPES         Rule_RuleType = 103
	Rule_REQUIRE_TARGET_TYPES         Rule_RuleType = 104
	Rule_REQUIRE_SOURCE_QUANTITIES    Rule_RuleType = 105
	Rule_REQUIRE_TARGET_QUANTITIES    Rule_RuleType = 106
	Rule_EXCHANGE_ONCE                Rule_RuleType = 200
	Rule_EXCHANGE_ONCE_PER_ACCOUNT    Rule_RuleType = 201
	Rule_EXCHANGE_LIMITED_TO_ACCOUNTS Rule_RuleType = 202
)

var Rule_RuleType_name = map[int32]string{
	0:   "RULE_UNSET",
	100: "OWNER_HOLDINGS_INFINITE",
	101: "ALL_HOLDINGS_INFINITE",
	102: "NOT_TRANSFERABLE",
	103: "REQUIRE_SOURCE_TYPES",
	104: "REQUIRE_TARGET_TYPES",
	105: "REQUIRE_SOURCE_QUANTITIES",
	106: "REQUIRE_TARGET_QUANTITIES",
	200: "EXCHANGE_ONCE",
	201: "EXCHANGE_ONCE_PER_ACCOUNT",
	202: "EXCHANGE_LIMITED_TO_ACCOUNTS",
}
var Rule_RuleType_value = map[string]int32{
	"RULE_UNSET":                   0,
	"OWNER_HOLDINGS_INFINITE":      100,
	"ALL_HOLDINGS_INFINITE":        101,
	"NOT_TRANSFERABLE":             102,
	"REQUIRE_SOURCE_TYPES":         103,
	"REQUIRE_TARGET_TYPES":         104,
	"REQUIRE_SOURCE_QUANTITIES":    105,
	"REQUIRE_TARGET_QUANTITIES":    106,
	"EXCHANGE_ONCE":                200,
	"EXCHANGE_ONCE_PER_ACCOUNT":    201,
	"EXCHANGE_LIMITED_TO_ACCOUNTS": 202,
}

func (x Rule_RuleType) String() string {
	return proto.EnumName(Rule_RuleType_name, int32(x))
}
func (Rule_RuleType) EnumDescriptor() ([]byte, []int) { return fileDescriptor6, []int{0, 0} }

type Rule struct {
	Type  Rule_RuleType `protobuf:"varint,1,opt,name=type,enum=market.Rule_RuleType" json:"type,omitempty"`
	Value []byte        `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Rule) Reset()                    { *m = Rule{} }
func (m *Rule) String() string            { return proto.CompactTextString(m) }
func (*Rule) ProtoMessage()               {}
func (*Rule) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *Rule) GetType() Rule_RuleType {
	if m != nil {
		return m.Type
	}
	return Rule_RULE_UNSET
}

func (m *Rule) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*Rule)(nil), "market.Rule")
	proto.RegisterEnum("market.Rule_RuleType", Rule_RuleType_name, Rule_RuleType_value)
}

func init() { proto.RegisterFile("rule.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 299 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0xd1, 0x4d, 0x4b, 0x72, 0x41,
	0x14, 0x07, 0xf0, 0xe7, 0x8a, 0x8f, 0xc4, 0xa1, 0x64, 0x18, 0x94, 0x94, 0x5e, 0x30, 0x57, 0xb6,
	0x71, 0x51, 0x9f, 0x60, 0xba, 0x1e, 0x75, 0xe0, 0x36, 0xa3, 0x67, 0xce, 0xa5, 0x5a, 0x0d, 0x46,
	0xd3, 0xab, 0xa1, 0x88, 0x06, 0x7e, 0xac, 0xbe, 0x45, 0xf5, 0x95, 0xda, 0x84, 0x6f, 0x71, 0x8b,
	0x36, 0x03, 0x73, 0x7e, 0xff, 0x3f, 0x67, 0x71, 0x00, 0x26, 0xb3, 0x61, 0x68, 0x8e, 0x27, 0xa3,
	0xe9, 0x48, 0x16, 0x9e, 0x07, 0x93, 0xa7, 0x30, 0xad, 0x7f, 0xe6, 0x20, 0x4f, 0xb3, 0x61, 0x90,
	0xc7, 0x90, 0x9f, 0xce, 0xc7, 0xa1, 0x12, 0xd5, 0xa2, 0x46, 0xf1, 0xa4, 0xdc, 0x5c, 0x79, 0x73,
	0x61, 0xcb, 0x87, 0xe7, 0xe3, 0x40, 0xcb, 0x88, 0x2c, 0xc1, 0xff, 0x97, 0xc1, 0x70, 0x16, 0x2a,
	0xb9, 0x5a, 0xd4, 0xd8, 0xa6, 0xd5, 0xa7, 0xfe, 0x9a, 0x83, 0xad, 0x4d, 0x50, 0x16, 0x01, 0x28,
	0x4d, 0xd0, 0xa7, 0xc6, 0x21, 0x8b, 0x7f, 0x72, 0x0f, 0x76, 0xed, 0x85, 0x41, 0xf2, 0x5d, 0x9b,
	0xb4, 0xb4, 0xe9, 0x38, 0xaf, 0x4d, 0x5b, 0x1b, 0xcd, 0x28, 0x6e, 0x64, 0x15, 0xca, 0x2a, 0x49,
	0xfe, 0xa0, 0xc5, 0x2a, 0x61, 0x2c, 0x7b, 0x26, 0x65, 0x5c, 0x1b, 0x49, 0x9d, 0x25, 0x28, 0x6e,
	0x65, 0x05, 0x4a, 0x84, 0xfd, 0x54, 0x13, 0x7a, 0x67, 0x53, 0x8a, 0xd1, 0xf3, 0x55, 0x0f, 0x9d,
	0xb8, 0xcb, 0x0a, 0x2b, 0xea, 0x20, 0xaf, 0xe5, 0x5e, 0x1e, 0x40, 0xf5, 0x57, 0xa7, 0x9f, 0x2a,
	0xc3, 0x9a, 0x35, 0x3a, 0xf1, 0x90, 0xe5, 0x75, 0x31, 0xc3, 0x8f, 0x52, 0xc2, 0x0e, 0x5e, 0xc6,
	0x5d, 0x65, 0x3a, 0xe8, 0xad, 0x89, 0x51, 0xbc, 0x45, 0xf2, 0x10, 0xaa, 0x3f, 0x66, 0xbe, 0x87,
	0xe4, 0x55, 0x1c, 0xdb, 0xd4, 0xb0, 0x78, 0x8f, 0xe4, 0x11, 0xec, 0x7f, 0x7b, 0xa2, 0xcf, 0x35,
	0x63, 0xcb, 0xb3, 0xdd, 0x24, 0x9c, 0xf8, 0x88, 0xae, 0x0b, 0xcb, 0x63, 0x9c, 0x7e, 0x05, 0x00,
	0x00, 0xff, 0xff, 0x48, 0x5e, 0xd0, 0x4c, 0x9a, 0x01, 0x00, 0x00,
}
