// Code generated by protoc-gen-go. DO NOT EDIT.
// source: offer.proto

package market

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Offer_Status int32

const (
	Offer_STATUS_UNSET Offer_Status = 0
	Offer_OPEN         Offer_Status = 1
	Offer_CLOSED       Offer_Status = 2
)

var Offer_Status_name = map[int32]string{
	0: "STATUS_UNSET",
	1: "OPEN",
	2: "CLOSED",
}
var Offer_Status_value = map[string]int32{
	"STATUS_UNSET": 0,
	"OPEN":         1,
	"CLOSED":       2,
}

func (x Offer_Status) String() string {
	return proto.EnumName(Offer_Status_name, int32(x))
}
func (Offer_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 0} }

type Offer struct {
	Id             string       `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Label          string       `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	Description    string       `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Owners         []string     `protobuf:"bytes,4,rep,name=owners" json:"owners,omitempty"`
	Source         string       `protobuf:"bytes,5,opt,name=source" json:"source,omitempty"`
	SourceQuantity int64        `protobuf:"zigzag64,6,opt,name=source_quantity,json=sourceQuantity" json:"source_quantity,omitempty"`
	Target         string       `protobuf:"bytes,7,opt,name=target" json:"target,omitempty"`
	TargetQuantity int64        `protobuf:"zigzag64,8,opt,name=target_quantity,json=targetQuantity" json:"target_quantity,omitempty"`
	Rules          []*Rule      `protobuf:"bytes,9,rep,name=rules" json:"rules,omitempty"`
	Status         Offer_Status `protobuf:"varint,10,opt,name=status,enum=market.Offer_Status" json:"status,omitempty"`
}

func (m *Offer) Reset()                    { *m = Offer{} }
func (m *Offer) String() string            { return proto.CompactTextString(m) }
func (*Offer) ProtoMessage()               {}
func (*Offer) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *Offer) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Offer) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Offer) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Offer) GetOwners() []string {
	if m != nil {
		return m.Owners
	}
	return nil
}

func (m *Offer) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Offer) GetSourceQuantity() int64 {
	if m != nil {
		return m.SourceQuantity
	}
	return 0
}

func (m *Offer) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *Offer) GetTargetQuantity() int64 {
	if m != nil {
		return m.TargetQuantity
	}
	return 0
}

func (m *Offer) GetRules() []*Rule {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *Offer) GetStatus() Offer_Status {
	if m != nil {
		return m.Status
	}
	return Offer_STATUS_UNSET
}

type OfferContainer struct {
	Entries []*Offer `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (m *OfferContainer) Reset()                    { *m = OfferContainer{} }
func (m *OfferContainer) String() string            { return proto.CompactTextString(m) }
func (*OfferContainer) ProtoMessage()               {}
func (*OfferContainer) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *OfferContainer) GetEntries() []*Offer {
	if m != nil {
		return m.Entries
	}
	return nil
}

func init() {
	proto.RegisterType((*Offer)(nil), "market.Offer")
	proto.RegisterType((*OfferContainer)(nil), "market.OfferContainer")
	proto.RegisterEnum("market.Offer_Status", Offer_Status_name, Offer_Status_value)
}

func init() { proto.RegisterFile("offer.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xcf, 0x4f, 0xc2, 0x30,
	0x14, 0xc7, 0xdd, 0x60, 0x05, 0x1e, 0x38, 0x97, 0x86, 0x98, 0xc6, 0xd3, 0xb2, 0x0b, 0x3b, 0x98,
	0xc5, 0xe0, 0xc9, 0xa3, 0x41, 0x6e, 0x06, 0xb4, 0x83, 0x33, 0x19, 0x50, 0x4c, 0xe3, 0x5c, 0xb1,
	0xed, 0x62, 0xfc, 0xa3, 0xfd, 0x1f, 0xcc, 0xfa, 0x86, 0x3f, 0x6e, 0xfd, 0x7e, 0xbe, 0x6f, 0x9f,
	0x6d, 0xaf, 0x30, 0x54, 0x87, 0x83, 0xd0, 0xd9, 0x51, 0x2b, 0xab, 0x28, 0x79, 0x2b, 0xf4, 0xab,
	0xb0, 0x57, 0xa0, 0xeb, 0x52, 0x20, 0x4b, 0xbe, 0x7c, 0x08, 0x96, 0xcd, 0x0c, 0x0d, 0xc1, 0x97,
	0x7b, 0xe6, 0xc5, 0x5e, 0x3a, 0xe0, 0xbe, 0xdc, 0xd3, 0x31, 0x04, 0x65, 0xb1, 0x15, 0x25, 0xf3,
	0x1d, 0xc2, 0x40, 0x63, 0x18, 0xee, 0x85, 0xd9, 0x69, 0x79, 0xb4, 0x52, 0x55, 0xac, 0xe3, 0xba,
	0xbf, 0x88, 0x5e, 0x02, 0x51, 0x1f, 0x95, 0xd0, 0x86, 0x75, 0xe3, 0x4e, 0x3a, 0xe0, 0x6d, 0x6a,
	0xb8, 0x51, 0xb5, 0xde, 0x09, 0x16, 0xb8, 0x87, 0xda, 0x44, 0x27, 0x70, 0x81, 0xa7, 0xcd, 0x7b,
	0x5d, 0x54, 0x56, 0xda, 0x4f, 0x46, 0x62, 0x2f, 0xa5, 0x3c, 0x44, 0xfc, 0xdc, 0xd2, 0x46, 0x60,
	0x0b, 0xfd, 0x22, 0x2c, 0xeb, 0xa1, 0x00, 0x53, 0x23, 0xc0, 0xd3, 0xaf, 0xa0, 0x8f, 0x02, 0xc4,
	0x3f, 0x82, 0x04, 0x82, 0xe6, 0xcf, 0x0d, 0x1b, 0xc4, 0x9d, 0x74, 0x38, 0x1d, 0x65, 0xb8, 0x8f,
	0x8c, 0xd7, 0xa5, 0xe0, 0x58, 0xd1, 0x6b, 0x20, 0xc6, 0x16, 0xb6, 0x36, 0x0c, 0x62, 0x2f, 0x0d,
	0xa7, 0xe3, 0xd3, 0x90, 0x5b, 0x52, 0x96, 0xbb, 0x8e, 0xb7, 0x33, 0xc9, 0x0d, 0x10, 0x24, 0x34,
	0x82, 0x51, 0xbe, 0xba, 0x5f, 0xad, 0xf3, 0xcd, 0x7a, 0x91, 0xcf, 0x57, 0xd1, 0x19, 0xed, 0x43,
	0x77, 0xf9, 0x34, 0x5f, 0x44, 0x1e, 0x05, 0x20, 0xb3, 0xc7, 0x65, 0x3e, 0x7f, 0x88, 0xfc, 0xe4,
	0x0e, 0x42, 0x67, 0x9a, 0xa9, 0xca, 0x16, 0xb2, 0x12, 0x9a, 0x4e, 0xa0, 0x27, 0x2a, 0xab, 0xa5,
	0x30, 0xcc, 0x73, 0xdf, 0x75, 0xfe, 0xef, 0x95, 0xfc, 0xd4, 0x6e, 0x89, 0xbb, 0xb1, 0xdb, 0xef,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x34, 0x59, 0x7e, 0xa6, 0xd4, 0x01, 0x00, 0x00,
}
